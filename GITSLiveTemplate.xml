<templateSet group="GITSLiveTemplate">
  <template name="apilist" value="$APISERVICECLASS$&#10;                .$APIENDPOINT$&#10;                .subscribeOn(Schedulers.io())&#10;                .observeOn(AndroidSchedulers.mainThread())&#10;                .doOnSubscribe { callback.onShowProgressDialog() }&#10;                .doOnTerminate { callback.onHideProgressDialog() }&#10;                .subscribe(object : ApiCallback&lt;BaseApiModel&lt;List&lt;$APIRESPONSEMODEL$&gt;&gt;&gt;() {&#10;                    override fun onSuccess(model: BaseApiModel&lt;List&lt;$APIRESPONSEMODEL$&gt;&gt;) {&#10;                        val oldData = model.results&#10;                        val newData = ArrayList&lt;$APIRESPONSEMODEL$&gt;()&#10;&#10;                        for (i in 0 until oldData!!.size) {&#10;                            newData.add(Gson().fromJson($LISTADAPTER$.toJson(oldData[i]),&#10;                                    $APIRESPONSEMODEL$::class.java))&#10;                        }&#10;&#10;                        callback.onSuccess(newData)&#10;&#10;                        // if (model.code == 200) {&#10;                        // if (model.data != null) {&#10;                        // val oldData = model.results&#10;                        // val newData = ArrayList&lt;$APIRESPONSEMODEL$&gt;()&#10;&#10;                        // for (i in 0 until oldData!!.size) {&#10;                        // newData.add(Gson().fromJson($LISTADAPTER$.toJson(oldData[i]),&#10;                        // $APIRESPONSEMODEL$::class.java))&#10;                        // }&#10;&#10;                        // callback.onSuccess(newData)&#10;                        // } else {&#10;                        // callback.onFailed(model.code, model.message)&#10;                        // }&#10;                        // } else {&#10;                        // callback.onFailed(model.code, model.message)&#10;                        // }&#10;                    }&#10;&#10;                    override fun onFailure(code: Int, errorMessage: String) {&#10;                        callback.onFailed(code, errorMessage)&#10;                    }&#10;&#10;                    override fun onFinish() {&#10;                        callback.onFinish()&#10;                    }&#10;                })" description="Create observable api service for list of data" toReformat="true" toShortenFQNames="true">
    <variable name="APISERVICECLASS" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="APIENDPOINT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="APIRESPONSEMODEL" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="LISTADAPTER" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="KOTLIN_EXPRESSION" value="true" />
      <option name="KOTLIN_STATEMENT" value="true" />
      <option name="KOTLIN_TOPLEVEL" value="true" />
    </context>
  </template>
  <template name="api" value="$APISERVICECLASS$&#10;                .$APIENDPOINT$&#10;                .subscribeOn(Schedulers.io())&#10;                .observeOn(AndroidSchedulers.mainThread())&#10;                .doOnSubscribe { callback.onShowProgressDialog() }&#10;                .doOnTerminate { callback.onHideProgressDialog() }&#10;                .subscribe(object : ApiCallback&lt;BaseApiModel&lt;$APIRESPONSEMODEL$&gt;&gt;() {&#10;                    override fun onSuccess(model: BaseApiModel&lt;$APIRESPONSEMODEL$&gt;) {&#10;                        val oldData = model.data&#10;                        val newData = Gson().fromJson($ADAPTER$.toJson(oldData),&#10;                                    $APIRESPONSEMODEL$::class.java)&#10;&#10;                        callback.onSuccess(newData)&#10;&#10;                        // if (model.code == 200) {&#10;                        // if (model.data != null) {&#10;                        // val oldData = model.results&#10;                        // val newData = ArrayList&lt;$APIRESPONSEMODEL$&gt;()&#10;&#10;                        // for (i in 0 until oldData!!.size) {&#10;                        // newData.add(Gson().fromJson($ADAPTER$.toJson(oldData),&#10;                        // $APIRESPONSEMODEL$::class.java))&#10;                        // }&#10;&#10;                        // callback.onSuccess(newData)&#10;                        // } else {&#10;                        // callback.onFailed(model.code, model.message)&#10;                        // }&#10;                        // } else {&#10;                        // callback.onFailed(model.code, model.message)&#10;                        // }&#10;                    }&#10;&#10;                    override fun onFailure(code: Int, errorMessage: String) {&#10;                        callback.onFailed(code, errorMessage)&#10;                    }&#10;&#10;                    override fun onFinish() {&#10;                        callback.onFinish()&#10;                    }&#10;                })" description="Create observable api service for data" toReformat="true" toShortenFQNames="true">
    <variable name="APISERVICECLASS" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="APIENDPOINT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="APIRESPONSEMODEL" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="ADAPTER" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="KOTLIN_EXPRESSION" value="true" />
      <option name="KOTLIN_STATEMENT" value="true" />
      <option name="KOTLIN_TOPLEVEL" value="true" />
    </context>
  </template>
</templateSet>